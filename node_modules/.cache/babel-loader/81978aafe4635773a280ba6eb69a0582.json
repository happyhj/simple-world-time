{"ast":null,"code":"var _jsxFileName = \"/Users/heejaekim/Workspace/simple-world-time/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Slider from '@material-ui/core/Slider'; // import LabelingJobs from './LabelingJobs'\n// import LabelingJobOverview from './LabelingJobOverview'\n// import LabelingTool from './LabelingTool'\n\nimport SolarVisualization from './SolarVisualization';\nimport TimeZoneScale from './TimeZoneScale';\nimport { aquireLocalTimezone, aquireUTCTime } from '../actions/app';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      localHours: null,\n      localtimeVal: 0,\n      refPosition: 0,\n      timezone: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.aquireLocalTimezone();\n    this.props.aquireUTCTime();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(SolarVisualization, {\n      hours: parseInt(this.state.localtimeVal / (60 * 60), 10),\n      minutes: 0,\n      seconds: 0,\n      width: 800,\n      height: 24,\n      startPosition: this.state.refPosition / 100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(TimeZoneScale, {\n      timezone: this.state.timezone // -12 ~ +12 \n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"local time: \", parseInt(this.state.localtimeVal / (60 * 60), 10)), React.createElement(Slider, {\n      value: this.state.localtimeVal,\n      min: 0,\n      max: 86400,\n      onChange: (e, v) => {\n        this.setState({\n          localtimeVal: v\n        });\n      },\n      \"aria-labelledby\": \"local-time-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"ref position\"), React.createElement(Slider, {\n      value: this.state.refPosition,\n      min: 0,\n      max: 100,\n      onChange: (e, v) => {\n        this.setState({\n          refPosition: v\n        });\n      },\n      \"aria-labelledby\": \"ref-position-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"timezone: \", this.state.timezone), React.createElement(Slider, {\n      value: this.state.timezone,\n      min: -12,\n      max: 12,\n      onChange: (e, v) => {\n        this.setState({\n          timezone: v\n        });\n      },\n      \"aria-labelledby\": \"timezone-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(state => state, {\n  aquireLocalTimezone,\n  aquireUTCTime\n})(App);","map":{"version":3,"sources":["/Users/heejaekim/Workspace/simple-world-time/src/components/App.js"],"names":["React","Component","Route","Redirect","Switch","connect","Slider","SolarVisualization","TimeZoneScale","aquireLocalTimezone","aquireUTCTime","App","state","localHours","localtimeVal","refPosition","timezone","componentDidMount","props","componentWillUnmount","render","parseInt","e","v","setState"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport { Route, Redirect, Switch } from \"react-router-dom\"\n\nimport {connect} from 'react-redux'\nimport Slider from '@material-ui/core/Slider';\n\n// import LabelingJobs from './LabelingJobs'\n// import LabelingJobOverview from './LabelingJobOverview'\n// import LabelingTool from './LabelingTool'\nimport SolarVisualization from './SolarVisualization'\nimport TimeZoneScale from './TimeZoneScale'\n\nimport {aquireLocalTimezone, aquireUTCTime} from '../actions/app'\n\nimport './App.css'\n\nclass App extends Component {\n  // 앱이 시작될 때 현재 로컬 타임존을 얻어온다.\n  // UTC 시간 알아온다.  \n  state = {localHours: null, localtimeVal: 0, refPosition:0, timezone: 0}\n  componentDidMount() {\n    this.props.aquireLocalTimezone()\n    this.props.aquireUTCTime()\n  }\n  componentWillUnmount() {\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content-container\">\n          <SolarVisualization\n            hours={parseInt(this.state.localtimeVal/(60*60),10)}\n            minutes={0}\n            seconds={0}\n            width={800}\n            height={24}\n            startPosition={this.state.refPosition/100}\n          />\n          <TimeZoneScale\n            timezone={this.state.timezone}  // -12 ~ +12 \n          />\n\n          <p>local time: {parseInt(this.state.localtimeVal/(60*60), 10)}</p>\n          <Slider value={this.state.localtimeVal} \n            min={0}\n            max={86400}\n            onChange={(e, v) => {\n              this.setState({localtimeVal: v})\n            }} aria-labelledby=\"local-time-slider\" />\n          <p>ref position</p>\n          <Slider value={this.state.refPosition} \n            min={0}\n            max={100}\n            onChange={(e, v) => {\n              this.setState({refPosition: v})\n            }} aria-labelledby=\"ref-position-slider\" />\n          <p>timezone: {this.state.timezone}</p>\n          <Slider value={this.state.timezone} \n            min={-12}\n            max={12}\n            onChange={(e, v) => {\n              this.setState({timezone: v})\n            }} aria-labelledby=\"timezone-slider\" />\n          <br/>\n          <br/>\n        </div>\n      </div>\n    )\n  }\n}\nexport default connect(state => state, {aquireLocalTimezone, aquireUTCTime})(App)\n"]},"metadata":{},"sourceType":"module"}