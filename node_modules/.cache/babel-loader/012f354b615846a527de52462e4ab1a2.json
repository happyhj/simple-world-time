{"ast":null,"code":"var _jsxFileName = \"/Users/heejaekim/Workspace/simple-world-time/src/components/SolarVisualization.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MaterialIcon from '@material/react-material-icon';\nimport { Link } from 'react-router-dom';\nimport List, { ListItem, ListItemGraphic, ListItemText, ListItemMeta } from '@material/react-list';\nimport TopAppBar, { TopAppBarFixedAdjust, TopAppBarIcon, TopAppBarSection, TopAppBarTitle } from '@material/react-top-app-bar';\nimport Button from '@material/react-button';\nimport '@material/react-button/index.scss';\nimport { Headline6, Headline5, Headline3, Body1 } from '@material/react-typography';\nimport { aquireLocalTimezone, aquireUTCTime } from '../actions/app';\nimport '@material/react-typography/index.scss';\nimport './SolarVisualization.scss';\nimport solarGradient from '../assets/solar_gradient.png';\n\nclass SolarVisualization extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      img: null\n    };\n  }\n\n  componentDidMount() {\n    const image = new Image();\n    image.src = solarGradient;\n\n    image.onload = () => {\n      this.setState({\n        img: image\n      });\n    };\n\n    if (!this.props.app.UTCTimestamp) {\n      return;\n    }\n\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    if (!this.canvas || !this.context || !this.state.img) return;\n    const canvas = this.canvas;\n    const ctx = this.context;\n    let timeProgress = 1 - (this.props.hours * 60 * 60 + this.props.minutes * 60 + this.props.seconds) / 86400;\n    timeProgress = timeProgress + this.props.startPosition;\n\n    if (timeProgress >= 1) {\n      timeProgress = timeProgress - 1;\n    }\n\n    ctx.drawImage(this.state.img, this.state.img.width * (1 - timeProgress), 0, // 소스 이미지 시작 위치\n    this.state.img.width * timeProgress, this.state.img.height, // 소스 이미지 크기\n    0, 0, // 캔바스 위치\n    canvas.width * timeProgress, canvas.height // 캔바스 크기\n    );\n    ctx.drawImage(this.state.img, 0, 0, // 소스 이미지 시작 위치\n    this.state.img.width * (1 - timeProgress), this.state.img.height, // 소스 이미지 크기\n    canvas.width * timeProgress, 0, // 캔바스 위치\n    canvas.width * (1 - timeProgress), canvas.height // 캔바스 크기\n    );\n  }\n\n  componentWillUpdate() {\n    setTimeout(() => {\n      this.updateCanvas();\n    }, 0);\n  }\n\n  render() {\n    if (!this.props.app.UTCTimestamp) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"aquiring utc timestamp\");\n    }\n\n    let timeProgress = 1 - (this.props.hours * 60 * 60 + this.props.minutes * 60 + this.props.seconds) / 86400;\n    timeProgress = timeProgress + this.props.startPosition;\n\n    if (timeProgress >= 1) {\n      timeProgress = timeProgress - 1;\n    }\n\n    let sunProgress = timeProgress + 0.5;\n\n    if (sunProgress >= 1) {\n      sunProgress = sunProgress - 1;\n    } // 이미지 좌측이 현재 로컬시간 과 일치해야함\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"30px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(MaterialIcon, {\n      icon: \"wb_sunny\",\n      style: {\n        position: \"absolute\",\n        display: \"block\",\n        left: \"\".concat(sunProgress * 100, \"%\"),\n        top: \"50%\",\n        transform: \"translateX(-50%) translateY(-50%)\",\n        color: \"rgba(0, 0, 0, 0.25)\",\n        fontSize: \"16px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(MaterialIcon, {\n      icon: \"grade\",\n      style: {\n        position: \"absolute\",\n        display: \"block\",\n        left: \"\".concat(timeProgress * 100, \"%\"),\n        top: \"50%\",\n        transform: \"translateX(-50%) translateY(-50%)\",\n        color: \"rgba(0, 0, 0, 0.25)\",\n        fontSize: \"16px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"canvas\", {\n      ref: c => {\n        if (c) {\n          this.canvas = c;\n          this.context = c.getContext('2d');\n        }\n      },\n      width: this.props.width,\n      height: this.props.height,\n      style: {\n        width: \"100%\",\n        height: this.props.height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"image\",\n      src: solarGradient,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => state, {\n  aquireLocalTimezone,\n  aquireUTCTime\n})(SolarVisualization);","map":{"version":3,"sources":["/Users/heejaekim/Workspace/simple-world-time/src/components/SolarVisualization.js"],"names":["React","Component","connect","MaterialIcon","Link","List","ListItem","ListItemGraphic","ListItemText","ListItemMeta","TopAppBar","TopAppBarFixedAdjust","TopAppBarIcon","TopAppBarSection","TopAppBarTitle","Button","Headline6","Headline5","Headline3","Body1","aquireLocalTimezone","aquireUTCTime","solarGradient","SolarVisualization","state","img","componentDidMount","image","Image","src","onload","setState","props","app","UTCTimestamp","updateCanvas","canvas","context","ctx","timeProgress","hours","minutes","seconds","startPosition","drawImage","width","height","componentWillUpdate","setTimeout","render","sunProgress","position","display","left","top","transform","color","fontSize","c","getContext"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport MaterialIcon from '@material/react-material-icon';\nimport { Link } from 'react-router-dom'\nimport List, {ListItem, ListItemGraphic, ListItemText, ListItemMeta} from '@material/react-list';\n\nimport TopAppBar, {\n  TopAppBarFixedAdjust, \n  TopAppBarIcon,\n  TopAppBarSection,\n  TopAppBarTitle,\n} from '@material/react-top-app-bar'\nimport Button from '@material/react-button'\nimport '@material/react-button/index.scss'\nimport {\nHeadline6,\nHeadline5,\nHeadline3,\nBody1\n} from '@material/react-typography'\n\nimport {aquireLocalTimezone, aquireUTCTime} from '../actions/app'\n\nimport '@material/react-typography/index.scss'\nimport './SolarVisualization.scss'\n\nimport solarGradient from '../assets/solar_gradient.png';\n\nclass SolarVisualization extends Component {\n  state = {img: null}\n  componentDidMount() {\n    const image = new Image()\n    image.src = solarGradient\n    image.onload = () => {\n      this.setState({img: image})\n    }\n    if (!this.props.app.UTCTimestamp) {\n      return\n    }\n    this.updateCanvas()\n  }\n  updateCanvas() {\n    if(!this.canvas || !this.context || !this.state.img) return\n    const canvas = this.canvas\n    const ctx = this.context\n    let timeProgress = (1-(\n      (this.props.hours) * 60 * 60 +\n      this.props.minutes * 60 + \n      this.props.seconds\n    ) / 86400)\n    timeProgress = timeProgress + this.props.startPosition\n    if (timeProgress >= 1) {\n      timeProgress = timeProgress - 1\n    }\n\n    ctx.drawImage(this.state.img,\n      this.state.img.width * (1-timeProgress) , 0, // 소스 이미지 시작 위치\n      this.state.img.width * timeProgress, this.state.img.height,  // 소스 이미지 크기\n      0, 0, // 캔바스 위치\n      canvas.width * timeProgress, canvas.height // 캔바스 크기\n    )\n\n    ctx.drawImage(this.state.img,\n      0, 0, // 소스 이미지 시작 위치\n      this.state.img.width * (1-timeProgress), this.state.img.height,  // 소스 이미지 크기\n      canvas.width * timeProgress, 0, // 캔바스 위치\n      canvas.width * (1-timeProgress), canvas.height // 캔바스 크기\n    )\n  }\n  componentWillUpdate() {\n    setTimeout(() => {\n      this.updateCanvas()\n    }, 0)\n  }\n  render() {\n    if (!this.props.app.UTCTimestamp) {\n      return (<div>aquiring utc timestamp</div>)\n    }\n\n    let timeProgress = (1-(\n      (this.props.hours) * 60 * 60 +\n      this.props.minutes * 60 + \n      this.props.seconds\n    ) / 86400)\n    timeProgress = timeProgress + this.props.startPosition\n    if (timeProgress >= 1) {\n      timeProgress = timeProgress - 1\n    }\n    let sunProgress = timeProgress + 0.5\n    if (sunProgress >= 1) {\n      sunProgress = sunProgress - 1\n    }\n\n    // 이미지 좌측이 현재 로컬시간 과 일치해야함\n    return (<div>\n      <div \n        style={{\n          position: \"relative\",\n          width: \"100%\",\n          height: \"30px\",\n      }}>\n\n        <MaterialIcon icon='wb_sunny' style={{\n          position: \"absolute\",\n          display: \"block\",\n          left: `${(sunProgress)*100}%`,\n          top: \"50%\",\n          transform: \"translateX(-50%) translateY(-50%)\",\n          color: \"rgba(0, 0, 0, 0.25)\",\n          fontSize: \"16px\"\n        }}/>\n\n\n        <MaterialIcon icon='grade' style={{\n          position: \"absolute\",\n          display: \"block\",\n          left: `${(timeProgress)*100}%`,\n          top: \"50%\",\n          transform: \"translateX(-50%) translateY(-50%)\",\n          color: \"rgba(0, 0, 0, 0.25)\",\n          fontSize: \"16px\"\n        }}/>\n      </div>\n\n      <canvas ref={c => {\n        if (c) {\n          this.canvas = c\n          this.context = c.getContext('2d')\n        }\n      }} width={this.props.width} height={this.props.height} \n      style={{\n        width: \"100%\",\n        height: this.props.height\n      }}/>\n      <img ref=\"image\" src={solarGradient} className=\"hidden\" />\n    </div>)\n  }\n}\n\nexport default connect(state => state, {aquireLocalTimezone, aquireUTCTime})(SolarVisualization)\n"]},"metadata":{},"sourceType":"module"}